// Generated by CoffeeScript 1.7.1
(function() {
  var Dragdrop, Event,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Event = (function() {
    function Event() {
      this.handlers = {};
    }

    Event.prototype.on = function(type, handler) {
      if (!this.handlers[type]) {
        this.handlers[type] = [];
      }
      return this.handlers[type].push(handler);
    };

    Event.prototype.trigger = function() {
      var args, context, handler, type, _i, _len, _ref, _results;
      type = arguments[0], context = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      if (this.handlers[type].length) {
        _ref = this.handlers[type];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          handler = _ref[_i];
          _results.push(handler.apply(context, args));
        }
        return _results;
      }
    };

    Event.prototype.off = function(type, handler) {
      var index;
      if (this.handlers[type].length) {
        index = this.handlers[type].indexOf(handler);
        return this.handlers[type].splice(index, 1);
      }
    };

    Event.prototype.addEvent = function(ele, type, handler) {
      if (document.addEventListener) {
        return ele.addEventListener(type, handler, false);
      } else {
        return ele.attachEvent('on' + type, handler);
      }
    };

    return Event;

  })();

  Dragdrop = (function(_super) {
    __extends(Dragdrop, _super);

    function Dragdrop() {
      this.handleEvent = __bind(this.handleEvent, this);
      this.handlers = {};
      this.target = null;
      this.diffX = this.diffY = 0;
      this.status = document.getElementById('status');
      this.addEvent(document.body, 'mousedown', this.handleEvent);
      this.addEvent(document.body, 'mousemove', this.handleEvent);
      this.addEvent(document.body, 'mouseup', this.handleEvent);
      this.on('dragstart', function() {
        if (this.target && this.target.tagName) {
          return this.status.innerHTML = this.target.tagName + ' is being draged.';
        }
      });
      this.on('drag', function(event) {
        if (this.target && this.target.tagName) {
          return this.status.innerHTML = this.target.tagName + ' is being draged to ' + event.clientX + ' : ' + event.clientY;
        }
      });
      this.on('dragend', function(event) {
        if (this.target && this.target.tagName) {
          return this.status.innerHTML = this.target.tagName + ' has been draged to ' + event.clientX + ' : ' + event.clientY;
        }
      });
    }

    Dragdrop.prototype.handleEvent = function(event) {
      var target;
      event = event || window.event;
      target = event.target || event.srcElement;
      switch (event.type) {
        case 'mousedown':
          if (target.getAttribute('draggable')) {
            this.target = target;
          }
          this.diffX = event.clientX - target.offsetLeft;
          this.diffY = event.clientY - target.offsetTop;
          this.trigger('dragstart', this, event);
          break;
        case 'mousemove':
          if (this.target) {
            this.target.style.top = event.clientY - this.diffY + 'px';
            this.target.style.left = event.clientX - this.diffX + 'px';
            this.trigger('drag', this, event);
          }
          break;
        case 'mouseup':
          if (this.target) {
            this.trigger('dragend', this, event);
            this.target = null;
          }
      }
      return false;
    };

    return Dragdrop;

  })(Event);

  this.dragdrop = new Dragdrop;

}).call(this);
