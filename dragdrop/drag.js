// Generated by CoffeeScript 1.7.1
(function() {
  var Dragdrop,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Dragdrop = (function() {
    function Dragdrop() {
      this.mouseUp = __bind(this.mouseUp, this);
      this.mouseMove = __bind(this.mouseMove, this);
      this.mouseDown = __bind(this.mouseDown, this);
      this.div = document.getElementById('drag');
      this.diffX = this.diffY = 0;
      this.addEvent(this.div, 'mousedown', this.mouseDown);
    }

    Dragdrop.prototype.mouseDown = function(event) {
      event = this.getEvent(event);
      this.diffX = event.clientX - this.div.offsetLeft;
      this.diffY = event.clientY - this.div.offsetTop;
      this.addEvent(document, 'mousemove', this.mouseMove);
      this.addEvent(document, 'mouseup', this.mouseUp);
      return false;
    };

    Dragdrop.prototype.mouseMove = function(event) {
      event = this.getEvent(event);
      this.div.style.left = event.clientX - this.diffX + 'px';
      this.div.style.top = event.clientY - this.diffY + 'px';
      return false;
    };

    Dragdrop.prototype.mouseUp = function() {
      this.removeEvent(document, 'mousemove', this.mouseMove);
      return this.removeEvent(document, 'mouseup', this.mouseUp);
    };

    Dragdrop.prototype.getEvent = function(event) {
      return event || window.event;
    };

    Dragdrop.prototype.addEvent = function(ele, type, handler) {
      if (document.addEventListener) {
        return ele.addEventListener(type, handler, false);
      } else if (document.attachEvent) {
        return ele.attachEvent('on' + type, handler);
      }
    };

    Dragdrop.prototype.removeEvent = function(ele, type, handler) {
      if (document.removeEventListener) {
        return ele.removeEventListener(type, handler, false);
      } else if (document.detachEvent) {
        return ele.detachEvent('on' + type, handler);
      }
    };

    return Dragdrop;

  })();

  new Dragdrop;

}).call(this);
